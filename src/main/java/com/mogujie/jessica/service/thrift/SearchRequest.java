/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.mogujie.jessica.service.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SearchRequest implements org.apache.thrift.TBase<SearchRequest, SearchRequest._Fields>, java.io.Serializable, Cloneable
{
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SearchRequest");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short) 2);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short) 3);
    private static final org.apache.thrift.protocol.TField SORT_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("sortField", org.apache.thrift.protocol.TType.STRING, (short) 4);
    private static final org.apache.thrift.protocol.TField SORT_REVERSE_FIELD_DESC = new org.apache.thrift.protocol.TField("sortReverse", org.apache.thrift.protocol.TType.BOOL, (short) 5);
    private static final org.apache.thrift.protocol.TField SORT_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("sortMap", org.apache.thrift.protocol.TType.MAP, (short) 6);
    private static final org.apache.thrift.protocol.TField FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fields", org.apache.thrift.protocol.TType.LIST, (short) 7);
    private static final org.apache.thrift.protocol.TField QTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("qtime", org.apache.thrift.protocol.TType.I32, (short) 8);
    private static final org.apache.thrift.protocol.TField STIME_FIELD_DESC = new org.apache.thrift.protocol.TField("stime", org.apache.thrift.protocol.TType.I32, (short) 9);

    public String query; // required
    public int offset; // required
    public int limit; // required
    public String sortField; // required
    public boolean sortReverse; // required
    public Map<String, Integer> sortMap; // required
    public List<String> fields; // required
    public int qtime; // required
    public int stime; // required

    /**
     * The set of fields this struct contains, along with convenience methods
     * for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum
    {
        QUERY((short) 1, "query"), OFFSET((short) 2, "offset"), LIMIT((short) 3, "limit"), SORT_FIELD((short) 4, "sortField"), SORT_REVERSE((short) 5, "sortReverse"), SORT_MAP((short) 6, "sortMap"), FIELDS((short) 7, "fields"), QTIME((short) 8, "qtime"), STIME((short) 9, "stime");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static
        {
            for (_Fields field : EnumSet.allOf(_Fields.class))
            {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not
         * found.
         */
        public static _Fields findByThriftId(int fieldId)
        {
            switch (fieldId)
            {
            case 1: // QUERY
                return QUERY;
            case 2: // OFFSET
                return OFFSET;
            case 3: // LIMIT
                return LIMIT;
            case 4: // SORT_FIELD
                return SORT_FIELD;
            case 5: // SORT_REVERSE
                return SORT_REVERSE;
            case 6: // SORT_MAP
                return SORT_MAP;
            case 7: // FIELDS
                return FIELDS;
            case 8: // QTIME
                return QTIME;
            case 9: // STIME
                return STIME;
            default:
                return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId)
        {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not
         * found.
         */
        public static _Fields findByName(String name)
        {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName)
        {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId()
        {
            return _thriftId;
        }

        public String getFieldName()
        {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __OFFSET_ISSET_ID = 0;
    private static final int __LIMIT_ISSET_ID = 1;
    private static final int __SORTREVERSE_ISSET_ID = 2;
    private static final int __QTIME_ISSET_ID = 3;
    private static final int __STIME_ISSET_ID = 4;
    private BitSet __isset_bit_vector = new BitSet(5);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static
    {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.REQUIRED, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.REQUIRED, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.REQUIRED, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.SORT_FIELD, new org.apache.thrift.meta_data.FieldMetaData("sortField", org.apache.thrift.TFieldRequirementType.REQUIRED, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.SORT_REVERSE, new org.apache.thrift.meta_data.FieldMetaData("sortReverse", org.apache.thrift.TFieldRequirementType.REQUIRED, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
        tmpMap.put(_Fields.SORT_MAP, new org.apache.thrift.meta_data.FieldMetaData("sortMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
        tmpMap.put(_Fields.FIELDS, new org.apache.thrift.meta_data.FieldMetaData("fields", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.QTIME, new org.apache.thrift.meta_data.FieldMetaData("qtime", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.STIME, new org.apache.thrift.meta_data.FieldMetaData("stime", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SearchRequest.class, metaDataMap);
    }

    public SearchRequest()
    {
        this.sortField = "default";

        this.qtime = 20;

        this.stime = 10;

    }

    public SearchRequest(String query, int offset, int limit, String sortField, boolean sortReverse)
    {
        this();
        this.query = query;
        this.offset = offset;
        setOffsetIsSet(true);
        this.limit = limit;
        setLimitIsSet(true);
        this.sortField = sortField;
        this.sortReverse = sortReverse;
        setSortReverseIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SearchRequest(SearchRequest other)
    {
        __isset_bit_vector.clear();
        __isset_bit_vector.or(other.__isset_bit_vector);
        if (other.isSetQuery())
        {
            this.query = other.query;
        }
        this.offset = other.offset;
        this.limit = other.limit;
        if (other.isSetSortField())
        {
            this.sortField = other.sortField;
        }
        this.sortReverse = other.sortReverse;
        if (other.isSetSortMap())
        {
            Map<String, Integer> __this__sortMap = new HashMap<String, Integer>();
            for (Map.Entry<String, Integer> other_element : other.sortMap.entrySet())
            {

                String other_element_key = other_element.getKey();
                Integer other_element_value = other_element.getValue();

                String __this__sortMap_copy_key = other_element_key;

                Integer __this__sortMap_copy_value = other_element_value;

                __this__sortMap.put(__this__sortMap_copy_key, __this__sortMap_copy_value);
            }
            this.sortMap = __this__sortMap;
        }
        if (other.isSetFields())
        {
            List<String> __this__fields = new ArrayList<String>();
            for (String other_element : other.fields)
            {
                __this__fields.add(other_element);
            }
            this.fields = __this__fields;
        }
        this.qtime = other.qtime;
        this.stime = other.stime;
    }

    public SearchRequest deepCopy()
    {
        return new SearchRequest(this);
    }

    @Override
    public void clear()
    {
        this.query = null;
        setOffsetIsSet(false);
        this.offset = 0;
        setLimitIsSet(false);
        this.limit = 0;
        this.sortField = "default";

        setSortReverseIsSet(false);
        this.sortReverse = false;
        this.sortMap = null;
        this.fields = null;
        this.qtime = 20;

        this.stime = 10;

    }

    public String getQuery()
    {
        return this.query;
    }

    public SearchRequest setQuery(String query)
    {
        this.query = query;
        return this;
    }

    public void unsetQuery()
    {
        this.query = null;
    }

    /**
     * Returns true if field query is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSetQuery()
    {
        return this.query != null;
    }

    public void setQueryIsSet(boolean value)
    {
        if (!value)
        {
            this.query = null;
        }
    }

    public int getOffset()
    {
        return this.offset;
    }

    public SearchRequest setOffset(int offset)
    {
        this.offset = offset;
        setOffsetIsSet(true);
        return this;
    }

    public void unsetOffset()
    {
        __isset_bit_vector.clear(__OFFSET_ISSET_ID);
    }

    /**
     * Returns true if field offset is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSetOffset()
    {
        return __isset_bit_vector.get(__OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value)
    {
        __isset_bit_vector.set(__OFFSET_ISSET_ID, value);
    }

    public int getLimit()
    {
        return this.limit;
    }

    public SearchRequest setLimit(int limit)
    {
        this.limit = limit;
        setLimitIsSet(true);
        return this;
    }

    public void unsetLimit()
    {
        __isset_bit_vector.clear(__LIMIT_ISSET_ID);
    }

    /**
     * Returns true if field limit is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSetLimit()
    {
        return __isset_bit_vector.get(__LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value)
    {
        __isset_bit_vector.set(__LIMIT_ISSET_ID, value);
    }

    public String getSortField()
    {
        return this.sortField;
    }

    public SearchRequest setSortField(String sortField)
    {
        this.sortField = sortField;
        return this;
    }

    public void unsetSortField()
    {
        this.sortField = null;
    }

    /**
     * Returns true if field sortField is set (has been assigned a value) and
     * false otherwise
     */
    public boolean isSetSortField()
    {
        return this.sortField != null;
    }

    public void setSortFieldIsSet(boolean value)
    {
        if (!value)
        {
            this.sortField = null;
        }
    }

    public boolean isSortReverse()
    {
        return this.sortReverse;
    }

    public SearchRequest setSortReverse(boolean sortReverse)
    {
        this.sortReverse = sortReverse;
        setSortReverseIsSet(true);
        return this;
    }

    public void unsetSortReverse()
    {
        __isset_bit_vector.clear(__SORTREVERSE_ISSET_ID);
    }

    /**
     * Returns true if field sortReverse is set (has been assigned a value) and
     * false otherwise
     */
    public boolean isSetSortReverse()
    {
        return __isset_bit_vector.get(__SORTREVERSE_ISSET_ID);
    }

    public void setSortReverseIsSet(boolean value)
    {
        __isset_bit_vector.set(__SORTREVERSE_ISSET_ID, value);
    }

    public int getSortMapSize()
    {
        return (this.sortMap == null) ? 0 : this.sortMap.size();
    }

    public void putToSortMap(String key, int val)
    {
        if (this.sortMap == null)
        {
            this.sortMap = new HashMap<String, Integer>();
        }
        this.sortMap.put(key, val);
    }

    public Map<String, Integer> getSortMap()
    {
        return this.sortMap;
    }

    public SearchRequest setSortMap(Map<String, Integer> sortMap)
    {
        this.sortMap = sortMap;
        return this;
    }

    public void unsetSortMap()
    {
        this.sortMap = null;
    }

    /**
     * Returns true if field sortMap is set (has been assigned a value) and
     * false otherwise
     */
    public boolean isSetSortMap()
    {
        return this.sortMap != null;
    }

    public void setSortMapIsSet(boolean value)
    {
        if (!value)
        {
            this.sortMap = null;
        }
    }

    public int getFieldsSize()
    {
        return (this.fields == null) ? 0 : this.fields.size();
    }

    public java.util.Iterator<String> getFieldsIterator()
    {
        return (this.fields == null) ? null : this.fields.iterator();
    }

    public void addToFields(String elem)
    {
        if (this.fields == null)
        {
            this.fields = new ArrayList<String>();
        }
        this.fields.add(elem);
    }

    public List<String> getFields()
    {
        return this.fields;
    }

    public SearchRequest setFields(List<String> fields)
    {
        this.fields = fields;
        return this;
    }

    public void unsetFields()
    {
        this.fields = null;
    }

    /**
     * Returns true if field fields is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSetFields()
    {
        return this.fields != null;
    }

    public void setFieldsIsSet(boolean value)
    {
        if (!value)
        {
            this.fields = null;
        }
    }

    public int getQtime()
    {
        return this.qtime;
    }

    public SearchRequest setQtime(int qtime)
    {
        this.qtime = qtime;
        setQtimeIsSet(true);
        return this;
    }

    public void unsetQtime()
    {
        __isset_bit_vector.clear(__QTIME_ISSET_ID);
    }

    /**
     * Returns true if field qtime is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSetQtime()
    {
        return __isset_bit_vector.get(__QTIME_ISSET_ID);
    }

    public void setQtimeIsSet(boolean value)
    {
        __isset_bit_vector.set(__QTIME_ISSET_ID, value);
    }

    public int getStime()
    {
        return this.stime;
    }

    public SearchRequest setStime(int stime)
    {
        this.stime = stime;
        setStimeIsSet(true);
        return this;
    }

    public void unsetStime()
    {
        __isset_bit_vector.clear(__STIME_ISSET_ID);
    }

    /**
     * Returns true if field stime is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSetStime()
    {
        return __isset_bit_vector.get(__STIME_ISSET_ID);
    }

    public void setStimeIsSet(boolean value)
    {
        __isset_bit_vector.set(__STIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value)
    {
        switch (field)
        {
        case QUERY:
            if (value == null)
            {
                unsetQuery();
            } else
            {
                setQuery((String) value);
            }
            break;

        case OFFSET:
            if (value == null)
            {
                unsetOffset();
            } else
            {
                setOffset((Integer) value);
            }
            break;

        case LIMIT:
            if (value == null)
            {
                unsetLimit();
            } else
            {
                setLimit((Integer) value);
            }
            break;

        case SORT_FIELD:
            if (value == null)
            {
                unsetSortField();
            } else
            {
                setSortField((String) value);
            }
            break;

        case SORT_REVERSE:
            if (value == null)
            {
                unsetSortReverse();
            } else
            {
                setSortReverse((Boolean) value);
            }
            break;

        case SORT_MAP:
            if (value == null)
            {
                unsetSortMap();
            } else
            {
                setSortMap((Map<String, Integer>) value);
            }
            break;

        case FIELDS:
            if (value == null)
            {
                unsetFields();
            } else
            {
                setFields((List<String>) value);
            }
            break;

        case QTIME:
            if (value == null)
            {
                unsetQtime();
            } else
            {
                setQtime((Integer) value);
            }
            break;

        case STIME:
            if (value == null)
            {
                unsetStime();
            } else
            {
                setStime((Integer) value);
            }
            break;

        }
    }

    public Object getFieldValue(_Fields field)
    {
        switch (field)
        {
        case QUERY:
            return getQuery();

        case OFFSET:
            return Integer.valueOf(getOffset());

        case LIMIT:
            return Integer.valueOf(getLimit());

        case SORT_FIELD:
            return getSortField();

        case SORT_REVERSE:
            return Boolean.valueOf(isSortReverse());

        case SORT_MAP:
            return getSortMap();

        case FIELDS:
            return getFields();

        case QTIME:
            return Integer.valueOf(getQtime());

        case STIME:
            return Integer.valueOf(getStime());

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned
     * a value) and false otherwise
     */
    public boolean isSet(_Fields field)
    {
        if (field == null)
        {
            throw new IllegalArgumentException();
        }

        switch (field)
        {
        case QUERY:
            return isSetQuery();
        case OFFSET:
            return isSetOffset();
        case LIMIT:
            return isSetLimit();
        case SORT_FIELD:
            return isSetSortField();
        case SORT_REVERSE:
            return isSetSortReverse();
        case SORT_MAP:
            return isSetSortMap();
        case FIELDS:
            return isSetFields();
        case QTIME:
            return isSetQtime();
        case STIME:
            return isSetStime();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that)
    {
        if (that == null)
            return false;
        if (that instanceof SearchRequest)
            return this.equals((SearchRequest) that);
        return false;
    }

    public boolean equals(SearchRequest that)
    {
        if (that == null)
            return false;

        boolean this_present_query = true && this.isSetQuery();
        boolean that_present_query = true && that.isSetQuery();
        if (this_present_query || that_present_query)
        {
            if (!(this_present_query && that_present_query))
                return false;
            if (!this.query.equals(that.query))
                return false;
        }

        boolean this_present_offset = true;
        boolean that_present_offset = true;
        if (this_present_offset || that_present_offset)
        {
            if (!(this_present_offset && that_present_offset))
                return false;
            if (this.offset != that.offset)
                return false;
        }

        boolean this_present_limit = true;
        boolean that_present_limit = true;
        if (this_present_limit || that_present_limit)
        {
            if (!(this_present_limit && that_present_limit))
                return false;
            if (this.limit != that.limit)
                return false;
        }

        boolean this_present_sortField = true && this.isSetSortField();
        boolean that_present_sortField = true && that.isSetSortField();
        if (this_present_sortField || that_present_sortField)
        {
            if (!(this_present_sortField && that_present_sortField))
                return false;
            if (!this.sortField.equals(that.sortField))
                return false;
        }

        boolean this_present_sortReverse = true;
        boolean that_present_sortReverse = true;
        if (this_present_sortReverse || that_present_sortReverse)
        {
            if (!(this_present_sortReverse && that_present_sortReverse))
                return false;
            if (this.sortReverse != that.sortReverse)
                return false;
        }

        boolean this_present_sortMap = true && this.isSetSortMap();
        boolean that_present_sortMap = true && that.isSetSortMap();
        if (this_present_sortMap || that_present_sortMap)
        {
            if (!(this_present_sortMap && that_present_sortMap))
                return false;
            if (!this.sortMap.equals(that.sortMap))
                return false;
        }

        boolean this_present_fields = true && this.isSetFields();
        boolean that_present_fields = true && that.isSetFields();
        if (this_present_fields || that_present_fields)
        {
            if (!(this_present_fields && that_present_fields))
                return false;
            if (!this.fields.equals(that.fields))
                return false;
        }

        boolean this_present_qtime = true && this.isSetQtime();
        boolean that_present_qtime = true && that.isSetQtime();
        if (this_present_qtime || that_present_qtime)
        {
            if (!(this_present_qtime && that_present_qtime))
                return false;
            if (this.qtime != that.qtime)
                return false;
        }

        boolean this_present_stime = true && this.isSetStime();
        boolean that_present_stime = true && that.isSetStime();
        if (this_present_stime || that_present_stime)
        {
            if (!(this_present_stime && that_present_stime))
                return false;
            if (this.stime != that.stime)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode()
    {
        return 0;
    }

    public int compareTo(SearchRequest other)
    {
        if (!getClass().equals(other.getClass()))
        {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        SearchRequest typedOther = (SearchRequest) other;

        lastComparison = Boolean.valueOf(isSetQuery()).compareTo(typedOther.isSetQuery());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetQuery())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, typedOther.query);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetOffset()).compareTo(typedOther.isSetOffset());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetOffset())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, typedOther.offset);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetLimit()).compareTo(typedOther.isSetLimit());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetLimit())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, typedOther.limit);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSortField()).compareTo(typedOther.isSetSortField());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetSortField())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortField, typedOther.sortField);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSortReverse()).compareTo(typedOther.isSetSortReverse());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetSortReverse())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortReverse, typedOther.sortReverse);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSortMap()).compareTo(typedOther.isSetSortMap());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetSortMap())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortMap, typedOther.sortMap);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetFields()).compareTo(typedOther.isSetFields());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetFields())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fields, typedOther.fields);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetQtime()).compareTo(typedOther.isSetQtime());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetQtime())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qtime, typedOther.qtime);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetStime()).compareTo(typedOther.isSetStime());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetStime())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stime, typedOther.stime);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId)
    {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException
    {
        org.apache.thrift.protocol.TField field;
        iprot.readStructBegin();
        while (true)
        {
            field = iprot.readFieldBegin();
            if (field.type == org.apache.thrift.protocol.TType.STOP)
            {
                break;
            }
            switch (field.id)
            {
            case 1: // QUERY
                if (field.type == org.apache.thrift.protocol.TType.STRING)
                {
                    this.query = iprot.readString();
                } else
                {
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 2: // OFFSET
                if (field.type == org.apache.thrift.protocol.TType.I32)
                {
                    this.offset = iprot.readI32();
                    setOffsetIsSet(true);
                } else
                {
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 3: // LIMIT
                if (field.type == org.apache.thrift.protocol.TType.I32)
                {
                    this.limit = iprot.readI32();
                    setLimitIsSet(true);
                } else
                {
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 4: // SORT_FIELD
                if (field.type == org.apache.thrift.protocol.TType.STRING)
                {
                    this.sortField = iprot.readString();
                } else
                {
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 5: // SORT_REVERSE
                if (field.type == org.apache.thrift.protocol.TType.BOOL)
                {
                    this.sortReverse = iprot.readBool();
                    setSortReverseIsSet(true);
                } else
                {
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 6: // SORT_MAP
                if (field.type == org.apache.thrift.protocol.TType.MAP)
                {
                    {
                        org.apache.thrift.protocol.TMap _map13 = iprot.readMapBegin();
                        this.sortMap = new HashMap<String, Integer>(2 * _map13.size);
                        for (int _i14 = 0; _i14 < _map13.size; ++_i14)
                        {
                            String _key15; // required
                            int _val16; // required
                            _key15 = iprot.readString();
                            _val16 = iprot.readI32();
                            this.sortMap.put(_key15, _val16);
                        }
                        iprot.readMapEnd();
                    }
                } else
                {
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 7: // FIELDS
                if (field.type == org.apache.thrift.protocol.TType.LIST)
                {
                    {
                        org.apache.thrift.protocol.TList _list17 = iprot.readListBegin();
                        this.fields = new ArrayList<String>(_list17.size);
                        for (int _i18 = 0; _i18 < _list17.size; ++_i18)
                        {
                            String _elem19; // required
                            _elem19 = iprot.readString();
                            this.fields.add(_elem19);
                        }
                        iprot.readListEnd();
                    }
                } else
                {
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 8: // QTIME
                if (field.type == org.apache.thrift.protocol.TType.I32)
                {
                    this.qtime = iprot.readI32();
                    setQtimeIsSet(true);
                } else
                {
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 9: // STIME
                if (field.type == org.apache.thrift.protocol.TType.I32)
                {
                    this.stime = iprot.readI32();
                    setStimeIsSet(true);
                } else
                {
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                }
                break;
            default:
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked
        // in the validate method
        if (!isSetOffset())
        {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'offset' was not found in serialized data! Struct: " + toString());
        }
        if (!isSetLimit())
        {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'limit' was not found in serialized data! Struct: " + toString());
        }
        if (!isSetSortReverse())
        {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'sortReverse' was not found in serialized data! Struct: " + toString());
        }
        validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
    {
        validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (this.query != null)
        {
            oprot.writeFieldBegin(QUERY_FIELD_DESC);
            oprot.writeString(this.query);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(this.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(this.limit);
        oprot.writeFieldEnd();
        if (this.sortField != null)
        {
            oprot.writeFieldBegin(SORT_FIELD_FIELD_DESC);
            oprot.writeString(this.sortField);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SORT_REVERSE_FIELD_DESC);
        oprot.writeBool(this.sortReverse);
        oprot.writeFieldEnd();
        if (this.sortMap != null)
        {
            if (isSetSortMap())
            {
                oprot.writeFieldBegin(SORT_MAP_FIELD_DESC);
                {
                    oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, this.sortMap.size()));
                    for (Map.Entry<String, Integer> _iter20 : this.sortMap.entrySet())
                    {
                        oprot.writeString(_iter20.getKey());
                        oprot.writeI32(_iter20.getValue());
                    }
                    oprot.writeMapEnd();
                }
                oprot.writeFieldEnd();
            }
        }
        if (this.fields != null)
        {
            if (isSetFields())
            {
                oprot.writeFieldBegin(FIELDS_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.fields.size()));
                    for (String _iter21 : this.fields)
                    {
                        oprot.writeString(_iter21);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
        }
        if (isSetQtime())
        {
            oprot.writeFieldBegin(QTIME_FIELD_DESC);
            oprot.writeI32(this.qtime);
            oprot.writeFieldEnd();
        }
        if (isSetStime())
        {
            oprot.writeFieldBegin(STIME_FIELD_DESC);
            oprot.writeI32(this.stime);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder("SearchRequest(");
        boolean first = true;

        sb.append("query:");
        if (this.query == null)
        {
            sb.append("null");
        } else
        {
            sb.append(this.query);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("offset:");
        sb.append(this.offset);
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("limit:");
        sb.append(this.limit);
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("sortField:");
        if (this.sortField == null)
        {
            sb.append("null");
        } else
        {
            sb.append(this.sortField);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("sortReverse:");
        sb.append(this.sortReverse);
        first = false;
        if (isSetSortMap())
        {
            if (!first)
                sb.append(", ");
            sb.append("sortMap:");
            if (this.sortMap == null)
            {
                sb.append("null");
            } else
            {
                sb.append(this.sortMap);
            }
            first = false;
        }
        if (isSetFields())
        {
            if (!first)
                sb.append(", ");
            sb.append("fields:");
            if (this.fields == null)
            {
                sb.append("null");
            } else
            {
                sb.append(this.fields);
            }
            first = false;
        }
        if (isSetQtime())
        {
            if (!first)
                sb.append(", ");
            sb.append("qtime:");
            sb.append(this.qtime);
            first = false;
        }
        if (isSetStime())
        {
            if (!first)
                sb.append(", ");
            sb.append("stime:");
            sb.append(this.stime);
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException
    {
        // check for required fields
        if (query == null)
        {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'query' was not present! Struct: " + toString());
        }
        // alas, we cannot check 'offset' because it's a primitive and you chose
        // the non-beans generator.
        // alas, we cannot check 'limit' because it's a primitive and you chose
        // the non-beans generator.
        if (sortField == null)
        {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'sortField' was not present! Struct: " + toString());
        }
        // alas, we cannot check 'sortReverse' because it's a primitive and you
        // chose the non-beans generator.
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
    {
        try
        {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te)
        {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException
    {
        try
        {
            // it doesn't seem like you should have to do this, but java
            // serialization is wacky, and doesn't call the default constructor.
            __isset_bit_vector = new BitSet(1);
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te)
        {
            throw new java.io.IOException(te);
        }
    }

}
