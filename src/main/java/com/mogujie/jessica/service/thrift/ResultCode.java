/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.mogujie.jessica.service.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ResultCode implements org.apache.thrift.TBase<ResultCode, ResultCode._Fields>, java.io.Serializable, Cloneable
{
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResultCode");

    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short) 2);

    public int code; // required
    public String msg; // required

    /**
     * The set of fields this struct contains, along with convenience methods
     * for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum
    {
        CODE((short) 1, "code"), MSG((short) 2, "msg");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static
        {
            for (_Fields field : EnumSet.allOf(_Fields.class))
            {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not
         * found.
         */
        public static _Fields findByThriftId(int fieldId)
        {
            switch (fieldId)
            {
            case 1: // CODE
                return CODE;
            case 2: // MSG
                return MSG;
            default:
                return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId)
        {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not
         * found.
         */
        public static _Fields findByName(String name)
        {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName)
        {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId()
        {
            return _thriftId;
        }

        public String getFieldName()
        {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __CODE_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static
    {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.REQUIRED, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResultCode.class, metaDataMap);
    }

    public ResultCode()
    {
    }

    public ResultCode(int code)
    {
        this();
        this.code = code;
        setCodeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ResultCode(ResultCode other)
    {
        __isset_bit_vector.clear();
        __isset_bit_vector.or(other.__isset_bit_vector);
        this.code = other.code;
        if (other.isSetMsg())
        {
            this.msg = other.msg;
        }
    }

    public ResultCode deepCopy()
    {
        return new ResultCode(this);
    }

    @Override
    public void clear()
    {
        setCodeIsSet(false);
        this.code = 0;
        this.msg = null;
    }

    public int getCode()
    {
        return this.code;
    }

    public ResultCode setCode(int code)
    {
        this.code = code;
        setCodeIsSet(true);
        return this;
    }

    public void unsetCode()
    {
        __isset_bit_vector.clear(__CODE_ISSET_ID);
    }

    /**
     * Returns true if field code is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSetCode()
    {
        return __isset_bit_vector.get(__CODE_ISSET_ID);
    }

    public void setCodeIsSet(boolean value)
    {
        __isset_bit_vector.set(__CODE_ISSET_ID, value);
    }

    public String getMsg()
    {
        return this.msg;
    }

    public ResultCode setMsg(String msg)
    {
        this.msg = msg;
        return this;
    }

    public void unsetMsg()
    {
        this.msg = null;
    }

    /**
     * Returns true if field msg is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSetMsg()
    {
        return this.msg != null;
    }

    public void setMsgIsSet(boolean value)
    {
        if (!value)
        {
            this.msg = null;
        }
    }

    public void setFieldValue(_Fields field, Object value)
    {
        switch (field)
        {
        case CODE:
            if (value == null)
            {
                unsetCode();
            } else
            {
                setCode((Integer) value);
            }
            break;

        case MSG:
            if (value == null)
            {
                unsetMsg();
            } else
            {
                setMsg((String) value);
            }
            break;

        }
    }

    public Object getFieldValue(_Fields field)
    {
        switch (field)
        {
        case CODE:
            return Integer.valueOf(getCode());

        case MSG:
            return getMsg();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned
     * a value) and false otherwise
     */
    public boolean isSet(_Fields field)
    {
        if (field == null)
        {
            throw new IllegalArgumentException();
        }

        switch (field)
        {
        case CODE:
            return isSetCode();
        case MSG:
            return isSetMsg();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that)
    {
        if (that == null)
            return false;
        if (that instanceof ResultCode)
            return this.equals((ResultCode) that);
        return false;
    }

    public boolean equals(ResultCode that)
    {
        if (that == null)
            return false;

        boolean this_present_code = true;
        boolean that_present_code = true;
        if (this_present_code || that_present_code)
        {
            if (!(this_present_code && that_present_code))
                return false;
            if (this.code != that.code)
                return false;
        }

        boolean this_present_msg = true && this.isSetMsg();
        boolean that_present_msg = true && that.isSetMsg();
        if (this_present_msg || that_present_msg)
        {
            if (!(this_present_msg && that_present_msg))
                return false;
            if (!this.msg.equals(that.msg))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode()
    {
        return 0;
    }

    public int compareTo(ResultCode other)
    {
        if (!getClass().equals(other.getClass()))
        {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        ResultCode typedOther = (ResultCode) other;

        lastComparison = Boolean.valueOf(isSetCode()).compareTo(typedOther.isSetCode());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetCode())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, typedOther.code);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMsg()).compareTo(typedOther.isSetMsg());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetMsg())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, typedOther.msg);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId)
    {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException
    {
        org.apache.thrift.protocol.TField field;
        iprot.readStructBegin();
        while (true)
        {
            field = iprot.readFieldBegin();
            if (field.type == org.apache.thrift.protocol.TType.STOP)
            {
                break;
            }
            switch (field.id)
            {
            case 1: // CODE
                if (field.type == org.apache.thrift.protocol.TType.I32)
                {
                    this.code = iprot.readI32();
                    setCodeIsSet(true);
                } else
                {
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 2: // MSG
                if (field.type == org.apache.thrift.protocol.TType.STRING)
                {
                    this.msg = iprot.readString();
                } else
                {
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                }
                break;
            default:
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked
        // in the validate method
        if (!isSetCode())
        {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'code' was not found in serialized data! Struct: " + toString());
        }
        validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
    {
        validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CODE_FIELD_DESC);
        oprot.writeI32(this.code);
        oprot.writeFieldEnd();
        if (this.msg != null)
        {
            if (isSetMsg())
            {
                oprot.writeFieldBegin(MSG_FIELD_DESC);
                oprot.writeString(this.msg);
                oprot.writeFieldEnd();
            }
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder("ResultCode(");
        boolean first = true;

        sb.append("code:");
        sb.append(this.code);
        first = false;
        if (isSetMsg())
        {
            if (!first)
                sb.append(", ");
            sb.append("msg:");
            if (this.msg == null)
            {
                sb.append("null");
            } else
            {
                sb.append(this.msg);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException
    {
        // check for required fields
        // alas, we cannot check 'code' because it's a primitive and you chose
        // the non-beans generator.
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
    {
        try
        {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te)
        {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException
    {
        try
        {
            // it doesn't seem like you should have to do this, but java
            // serialization is wacky, and doesn't call the default constructor.
            __isset_bit_vector = new BitSet(1);
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te)
        {
            throw new java.io.IOException(te);
        }
    }

}
