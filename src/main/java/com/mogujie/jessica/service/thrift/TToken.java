/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.mogujie.jessica.service.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TToken implements org.apache.thrift.TBase<TToken, TToken._Fields>, java.io.Serializable, Cloneable
{
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TToken");

    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.I32, (short) 2);
    private static final org.apache.thrift.protocol.TField WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("weight", org.apache.thrift.protocol.TType.I32, (short) 3);

    public String value; // required
    public int position; // required
    public int weight; // required

    /**
     * The set of fields this struct contains, along with convenience methods
     * for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum
    {
        VALUE((short) 1, "value"), POSITION((short) 2, "position"), WEIGHT((short) 3, "weight");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static
        {
            for (_Fields field : EnumSet.allOf(_Fields.class))
            {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not
         * found.
         */
        public static _Fields findByThriftId(int fieldId)
        {
            switch (fieldId)
            {
            case 1: // VALUE
                return VALUE;
            case 2: // POSITION
                return POSITION;
            case 3: // WEIGHT
                return WEIGHT;
            default:
                return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId)
        {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not
         * found.
         */
        public static _Fields findByName(String name)
        {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName)
        {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId()
        {
            return _thriftId;
        }

        public String getFieldName()
        {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __POSITION_ISSET_ID = 0;
    private static final int __WEIGHT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static
    {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.REQUIRED, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.REQUIRED, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("weight", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TToken.class, metaDataMap);
    }

    public TToken()
    {
        this.position = 255;

    }

    public TToken(String value, int position)
    {
        this();
        this.value = value;
        this.position = position;
        setPositionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TToken(TToken other)
    {
        __isset_bit_vector.clear();
        __isset_bit_vector.or(other.__isset_bit_vector);
        if (other.isSetValue())
        {
            this.value = other.value;
        }
        this.position = other.position;
        this.weight = other.weight;
    }

    public TToken deepCopy()
    {
        return new TToken(this);
    }

    @Override
    public void clear()
    {
        this.value = null;
        this.position = 255;

        setWeightIsSet(false);
        this.weight = 0;
    }

    public String getValue()
    {
        return this.value;
    }

    public TToken setValue(String value)
    {
        this.value = value;
        return this;
    }

    public void unsetValue()
    {
        this.value = null;
    }

    /**
     * Returns true if field value is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSetValue()
    {
        return this.value != null;
    }

    public void setValueIsSet(boolean value)
    {
        if (!value)
        {
            this.value = null;
        }
    }

    public int getPosition()
    {
        return this.position;
    }

    public TToken setPosition(int position)
    {
        this.position = position;
        setPositionIsSet(true);
        return this;
    }

    public void unsetPosition()
    {
        __isset_bit_vector.clear(__POSITION_ISSET_ID);
    }

    /**
     * Returns true if field position is set (has been assigned a value) and
     * false otherwise
     */
    public boolean isSetPosition()
    {
        return __isset_bit_vector.get(__POSITION_ISSET_ID);
    }

    public void setPositionIsSet(boolean value)
    {
        __isset_bit_vector.set(__POSITION_ISSET_ID, value);
    }

    public int getWeight()
    {
        return this.weight;
    }

    public TToken setWeight(int weight)
    {
        this.weight = weight;
        setWeightIsSet(true);
        return this;
    }

    public void unsetWeight()
    {
        __isset_bit_vector.clear(__WEIGHT_ISSET_ID);
    }

    /**
     * Returns true if field weight is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSetWeight()
    {
        return __isset_bit_vector.get(__WEIGHT_ISSET_ID);
    }

    public void setWeightIsSet(boolean value)
    {
        __isset_bit_vector.set(__WEIGHT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value)
    {
        switch (field)
        {
        case VALUE:
            if (value == null)
            {
                unsetValue();
            } else
            {
                setValue((String) value);
            }
            break;

        case POSITION:
            if (value == null)
            {
                unsetPosition();
            } else
            {
                setPosition((Integer) value);
            }
            break;

        case WEIGHT:
            if (value == null)
            {
                unsetWeight();
            } else
            {
                setWeight((Integer) value);
            }
            break;

        }
    }

    public Object getFieldValue(_Fields field)
    {
        switch (field)
        {
        case VALUE:
            return getValue();

        case POSITION:
            return Integer.valueOf(getPosition());

        case WEIGHT:
            return Integer.valueOf(getWeight());

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned
     * a value) and false otherwise
     */
    public boolean isSet(_Fields field)
    {
        if (field == null)
        {
            throw new IllegalArgumentException();
        }

        switch (field)
        {
        case VALUE:
            return isSetValue();
        case POSITION:
            return isSetPosition();
        case WEIGHT:
            return isSetWeight();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that)
    {
        if (that == null)
            return false;
        if (that instanceof TToken)
            return this.equals((TToken) that);
        return false;
    }

    public boolean equals(TToken that)
    {
        if (that == null)
            return false;

        boolean this_present_value = true && this.isSetValue();
        boolean that_present_value = true && that.isSetValue();
        if (this_present_value || that_present_value)
        {
            if (!(this_present_value && that_present_value))
                return false;
            if (!this.value.equals(that.value))
                return false;
        }

        boolean this_present_position = true;
        boolean that_present_position = true;
        if (this_present_position || that_present_position)
        {
            if (!(this_present_position && that_present_position))
                return false;
            if (this.position != that.position)
                return false;
        }

        boolean this_present_weight = true && this.isSetWeight();
        boolean that_present_weight = true && that.isSetWeight();
        if (this_present_weight || that_present_weight)
        {
            if (!(this_present_weight && that_present_weight))
                return false;
            if (this.weight != that.weight)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode()
    {
        return 0;
    }

    public int compareTo(TToken other)
    {
        if (!getClass().equals(other.getClass()))
        {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        TToken typedOther = (TToken) other;

        lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetValue())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPosition()).compareTo(typedOther.isSetPosition());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetPosition())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, typedOther.position);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetWeight()).compareTo(typedOther.isSetWeight());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetWeight())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weight, typedOther.weight);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId)
    {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException
    {
        org.apache.thrift.protocol.TField field;
        iprot.readStructBegin();
        while (true)
        {
            field = iprot.readFieldBegin();
            if (field.type == org.apache.thrift.protocol.TType.STOP)
            {
                break;
            }
            switch (field.id)
            {
            case 1: // VALUE
                if (field.type == org.apache.thrift.protocol.TType.STRING)
                {
                    this.value = iprot.readString();
                } else
                {
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 2: // POSITION
                if (field.type == org.apache.thrift.protocol.TType.I32)
                {
                    this.position = iprot.readI32();
                    setPositionIsSet(true);
                } else
                {
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 3: // WEIGHT
                if (field.type == org.apache.thrift.protocol.TType.I32)
                {
                    this.weight = iprot.readI32();
                    setWeightIsSet(true);
                } else
                {
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                }
                break;
            default:
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked
        // in the validate method
        if (!isSetPosition())
        {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'position' was not found in serialized data! Struct: " + toString());
        }
        validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
    {
        validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (this.value != null)
        {
            oprot.writeFieldBegin(VALUE_FIELD_DESC);
            oprot.writeString(this.value);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(POSITION_FIELD_DESC);
        oprot.writeI32(this.position);
        oprot.writeFieldEnd();
        if (isSetWeight())
        {
            oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
            oprot.writeI32(this.weight);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder("TToken(");
        boolean first = true;

        sb.append("value:");
        if (this.value == null)
        {
            sb.append("null");
        } else
        {
            sb.append(this.value);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("position:");
        sb.append(this.position);
        first = false;
        if (isSetWeight())
        {
            if (!first)
                sb.append(", ");
            sb.append("weight:");
            sb.append(this.weight);
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException
    {
        // check for required fields
        if (value == null)
        {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'value' was not present! Struct: " + toString());
        }
        // alas, we cannot check 'position' because it's a primitive and you
        // chose the non-beans generator.
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
    {
        try
        {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te)
        {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException
    {
        try
        {
            // it doesn't seem like you should have to do this, but java
            // serialization is wacky, and doesn't call the default constructor.
            __isset_bit_vector = new BitSet(1);
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te)
        {
            throw new java.io.IOException(te);
        }
    }

}
