/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.mogujie.jessica.service.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TDocument implements org.apache.thrift.TBase<TDocument, TDocument._Fields>, java.io.Serializable, Cloneable
{
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDocument");

    private static final org.apache.thrift.protocol.TField OBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("object_id", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fields", org.apache.thrift.protocol.TType.LIST, (short) 2);
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I32, (short) 3);
    private static final org.apache.thrift.protocol.TField SEGMENTATION_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("segmentationHost", org.apache.thrift.protocol.TType.STRING, (short) 4);
    private static final org.apache.thrift.protocol.TField SHARD_IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("shardIdx", org.apache.thrift.protocol.TType.I32, (short) 5);
    private static final org.apache.thrift.protocol.TField DOC_FIELD_DESC = new org.apache.thrift.protocol.TField("doc", org.apache.thrift.protocol.TType.STRUCT, (short) 6);

    public int object_id; // required
    public List<TField> fields; // required
    public int timestamp; // required
    public String segmentationHost; // required
    public int shardIdx; // required
    public Doc doc; // required

    /**
     * The set of fields this struct contains, along with convenience methods
     * for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum
    {
        OBJECT_ID((short) 1, "object_id"), FIELDS((short) 2, "fields"), TIMESTAMP((short) 3, "timestamp"), SEGMENTATION_HOST((short) 4, "segmentationHost"), SHARD_IDX((short) 5, "shardIdx"), DOC((short) 6, "doc");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static
        {
            for (_Fields field : EnumSet.allOf(_Fields.class))
            {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not
         * found.
         */
        public static _Fields findByThriftId(int fieldId)
        {
            switch (fieldId)
            {
            case 1: // OBJECT_ID
                return OBJECT_ID;
            case 2: // FIELDS
                return FIELDS;
            case 3: // TIMESTAMP
                return TIMESTAMP;
            case 4: // SEGMENTATION_HOST
                return SEGMENTATION_HOST;
            case 5: // SHARD_IDX
                return SHARD_IDX;
            case 6: // DOC
                return DOC;
            default:
                return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId)
        {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not
         * found.
         */
        public static _Fields findByName(String name)
        {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName)
        {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId()
        {
            return _thriftId;
        }

        public String getFieldName()
        {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __OBJECT_ID_ISSET_ID = 0;
    private static final int __TIMESTAMP_ISSET_ID = 1;
    private static final int __SHARDIDX_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static
    {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.OBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("object_id", org.apache.thrift.TFieldRequirementType.REQUIRED, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.FIELDS, new org.apache.thrift.meta_data.FieldMetaData("fields", org.apache.thrift.TFieldRequirementType.REQUIRED, new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TField.class))));
        tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.SEGMENTATION_HOST, new org.apache.thrift.meta_data.FieldMetaData("segmentationHost", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.SHARD_IDX, new org.apache.thrift.meta_data.FieldMetaData("shardIdx", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.DOC, new org.apache.thrift.meta_data.FieldMetaData("doc", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Doc.class)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDocument.class, metaDataMap);
    }

    public TDocument()
    {
    }

    public TDocument(int object_id, List<TField> fields)
    {
        this();
        this.object_id = object_id;
        setObject_idIsSet(true);
        this.fields = fields;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TDocument(TDocument other)
    {
        __isset_bit_vector.clear();
        __isset_bit_vector.or(other.__isset_bit_vector);
        this.object_id = other.object_id;
        if (other.isSetFields())
        {
            List<TField> __this__fields = new ArrayList<TField>();
            for (TField other_element : other.fields)
            {
                __this__fields.add(new TField(other_element));
            }
            this.fields = __this__fields;
        }
        this.timestamp = other.timestamp;
        if (other.isSetSegmentationHost())
        {
            this.segmentationHost = other.segmentationHost;
        }
        this.shardIdx = other.shardIdx;
        if (other.isSetDoc())
        {
            this.doc = new Doc(other.doc);
        }
    }

    public TDocument deepCopy()
    {
        return new TDocument(this);
    }

    @Override
    public void clear()
    {
        setObject_idIsSet(false);
        this.object_id = 0;
        this.fields = null;
        setTimestampIsSet(false);
        this.timestamp = 0;
        this.segmentationHost = null;
        setShardIdxIsSet(false);
        this.shardIdx = 0;
        this.doc = null;
    }

    public int getObject_id()
    {
        return this.object_id;
    }

    public TDocument setObject_id(int object_id)
    {
        this.object_id = object_id;
        setObject_idIsSet(true);
        return this;
    }

    public void unsetObject_id()
    {
        __isset_bit_vector.clear(__OBJECT_ID_ISSET_ID);
    }

    /**
     * Returns true if field object_id is set (has been assigned a value) and
     * false otherwise
     */
    public boolean isSetObject_id()
    {
        return __isset_bit_vector.get(__OBJECT_ID_ISSET_ID);
    }

    public void setObject_idIsSet(boolean value)
    {
        __isset_bit_vector.set(__OBJECT_ID_ISSET_ID, value);
    }

    public int getFieldsSize()
    {
        return (this.fields == null) ? 0 : this.fields.size();
    }

    public java.util.Iterator<TField> getFieldsIterator()
    {
        return (this.fields == null) ? null : this.fields.iterator();
    }

    public void addToFields(TField elem)
    {
        if (this.fields == null)
        {
            this.fields = new ArrayList<TField>();
        }
        this.fields.add(elem);
    }

    public List<TField> getFields()
    {
        return this.fields;
    }

    public TDocument setFields(List<TField> fields)
    {
        this.fields = fields;
        return this;
    }

    public void unsetFields()
    {
        this.fields = null;
    }

    /**
     * Returns true if field fields is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSetFields()
    {
        return this.fields != null;
    }

    public void setFieldsIsSet(boolean value)
    {
        if (!value)
        {
            this.fields = null;
        }
    }

    public int getTimestamp()
    {
        return this.timestamp;
    }

    public TDocument setTimestamp(int timestamp)
    {
        this.timestamp = timestamp;
        setTimestampIsSet(true);
        return this;
    }

    public void unsetTimestamp()
    {
        __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
    }

    /**
     * Returns true if field timestamp is set (has been assigned a value) and
     * false otherwise
     */
    public boolean isSetTimestamp()
    {
        return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
    }

    public void setTimestampIsSet(boolean value)
    {
        __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
    }

    public String getSegmentationHost()
    {
        return this.segmentationHost;
    }

    public TDocument setSegmentationHost(String segmentationHost)
    {
        this.segmentationHost = segmentationHost;
        return this;
    }

    public void unsetSegmentationHost()
    {
        this.segmentationHost = null;
    }

    /**
     * Returns true if field segmentationHost is set (has been assigned a value)
     * and false otherwise
     */
    public boolean isSetSegmentationHost()
    {
        return this.segmentationHost != null;
    }

    public void setSegmentationHostIsSet(boolean value)
    {
        if (!value)
        {
            this.segmentationHost = null;
        }
    }

    public int getShardIdx()
    {
        return this.shardIdx;
    }

    public TDocument setShardIdx(int shardIdx)
    {
        this.shardIdx = shardIdx;
        setShardIdxIsSet(true);
        return this;
    }

    public void unsetShardIdx()
    {
        __isset_bit_vector.clear(__SHARDIDX_ISSET_ID);
    }

    /**
     * Returns true if field shardIdx is set (has been assigned a value) and
     * false otherwise
     */
    public boolean isSetShardIdx()
    {
        return __isset_bit_vector.get(__SHARDIDX_ISSET_ID);
    }

    public void setShardIdxIsSet(boolean value)
    {
        __isset_bit_vector.set(__SHARDIDX_ISSET_ID, value);
    }

    public Doc getDoc()
    {
        return this.doc;
    }

    public TDocument setDoc(Doc doc)
    {
        this.doc = doc;
        return this;
    }

    public void unsetDoc()
    {
        this.doc = null;
    }

    /**
     * Returns true if field doc is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSetDoc()
    {
        return this.doc != null;
    }

    public void setDocIsSet(boolean value)
    {
        if (!value)
        {
            this.doc = null;
        }
    }

    public void setFieldValue(_Fields field, Object value)
    {
        switch (field)
        {
        case OBJECT_ID:
            if (value == null)
            {
                unsetObject_id();
            } else
            {
                setObject_id((Integer) value);
            }
            break;

        case FIELDS:
            if (value == null)
            {
                unsetFields();
            } else
            {
                setFields((List<TField>) value);
            }
            break;

        case TIMESTAMP:
            if (value == null)
            {
                unsetTimestamp();
            } else
            {
                setTimestamp((Integer) value);
            }
            break;

        case SEGMENTATION_HOST:
            if (value == null)
            {
                unsetSegmentationHost();
            } else
            {
                setSegmentationHost((String) value);
            }
            break;

        case SHARD_IDX:
            if (value == null)
            {
                unsetShardIdx();
            } else
            {
                setShardIdx((Integer) value);
            }
            break;

        case DOC:
            if (value == null)
            {
                unsetDoc();
            } else
            {
                setDoc((Doc) value);
            }
            break;

        }
    }

    public Object getFieldValue(_Fields field)
    {
        switch (field)
        {
        case OBJECT_ID:
            return Integer.valueOf(getObject_id());

        case FIELDS:
            return getFields();

        case TIMESTAMP:
            return Integer.valueOf(getTimestamp());

        case SEGMENTATION_HOST:
            return getSegmentationHost();

        case SHARD_IDX:
            return Integer.valueOf(getShardIdx());

        case DOC:
            return getDoc();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned
     * a value) and false otherwise
     */
    public boolean isSet(_Fields field)
    {
        if (field == null)
        {
            throw new IllegalArgumentException();
        }

        switch (field)
        {
        case OBJECT_ID:
            return isSetObject_id();
        case FIELDS:
            return isSetFields();
        case TIMESTAMP:
            return isSetTimestamp();
        case SEGMENTATION_HOST:
            return isSetSegmentationHost();
        case SHARD_IDX:
            return isSetShardIdx();
        case DOC:
            return isSetDoc();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that)
    {
        if (that == null)
            return false;
        if (that instanceof TDocument)
            return this.equals((TDocument) that);
        return false;
    }

    public boolean equals(TDocument that)
    {
        if (that == null)
            return false;

        boolean this_present_object_id = true;
        boolean that_present_object_id = true;
        if (this_present_object_id || that_present_object_id)
        {
            if (!(this_present_object_id && that_present_object_id))
                return false;
            if (this.object_id != that.object_id)
                return false;
        }

        boolean this_present_fields = true && this.isSetFields();
        boolean that_present_fields = true && that.isSetFields();
        if (this_present_fields || that_present_fields)
        {
            if (!(this_present_fields && that_present_fields))
                return false;
            if (!this.fields.equals(that.fields))
                return false;
        }

        boolean this_present_timestamp = true && this.isSetTimestamp();
        boolean that_present_timestamp = true && that.isSetTimestamp();
        if (this_present_timestamp || that_present_timestamp)
        {
            if (!(this_present_timestamp && that_present_timestamp))
                return false;
            if (this.timestamp != that.timestamp)
                return false;
        }

        boolean this_present_segmentationHost = true && this.isSetSegmentationHost();
        boolean that_present_segmentationHost = true && that.isSetSegmentationHost();
        if (this_present_segmentationHost || that_present_segmentationHost)
        {
            if (!(this_present_segmentationHost && that_present_segmentationHost))
                return false;
            if (!this.segmentationHost.equals(that.segmentationHost))
                return false;
        }

        boolean this_present_shardIdx = true && this.isSetShardIdx();
        boolean that_present_shardIdx = true && that.isSetShardIdx();
        if (this_present_shardIdx || that_present_shardIdx)
        {
            if (!(this_present_shardIdx && that_present_shardIdx))
                return false;
            if (this.shardIdx != that.shardIdx)
                return false;
        }

        boolean this_present_doc = true && this.isSetDoc();
        boolean that_present_doc = true && that.isSetDoc();
        if (this_present_doc || that_present_doc)
        {
            if (!(this_present_doc && that_present_doc))
                return false;
            if (!this.doc.equals(that.doc))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode()
    {
        return 0;
    }

    public int compareTo(TDocument other)
    {
        if (!getClass().equals(other.getClass()))
        {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        TDocument typedOther = (TDocument) other;

        lastComparison = Boolean.valueOf(isSetObject_id()).compareTo(typedOther.isSetObject_id());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetObject_id())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.object_id, typedOther.object_id);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetFields()).compareTo(typedOther.isSetFields());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetFields())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fields, typedOther.fields);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetTimestamp())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSegmentationHost()).compareTo(typedOther.isSetSegmentationHost());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetSegmentationHost())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.segmentationHost, typedOther.segmentationHost);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetShardIdx()).compareTo(typedOther.isSetShardIdx());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetShardIdx())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shardIdx, typedOther.shardIdx);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDoc()).compareTo(typedOther.isSetDoc());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetDoc())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doc, typedOther.doc);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId)
    {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException
    {
        org.apache.thrift.protocol.TField field;
        iprot.readStructBegin();
        while (true)
        {
            field = iprot.readFieldBegin();
            if (field.type == org.apache.thrift.protocol.TType.STOP)
            {
                break;
            }
            switch (field.id)
            {
            case 1: // OBJECT_ID
                if (field.type == org.apache.thrift.protocol.TType.I32)
                {
                    this.object_id = iprot.readI32();
                    setObject_idIsSet(true);
                } else
                {
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 2: // FIELDS
                if (field.type == org.apache.thrift.protocol.TType.LIST)
                {
                    {
                        org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                        this.fields = new ArrayList<TField>(_list9.size);
                        for (int _i10 = 0; _i10 < _list9.size; ++_i10)
                        {
                            TField _elem11; // required
                            _elem11 = new TField();
                            _elem11.read(iprot);
                            this.fields.add(_elem11);
                        }
                        iprot.readListEnd();
                    }
                } else
                {
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 3: // TIMESTAMP
                if (field.type == org.apache.thrift.protocol.TType.I32)
                {
                    this.timestamp = iprot.readI32();
                    setTimestampIsSet(true);
                } else
                {
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 4: // SEGMENTATION_HOST
                if (field.type == org.apache.thrift.protocol.TType.STRING)
                {
                    this.segmentationHost = iprot.readString();
                } else
                {
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 5: // SHARD_IDX
                if (field.type == org.apache.thrift.protocol.TType.I32)
                {
                    this.shardIdx = iprot.readI32();
                    setShardIdxIsSet(true);
                } else
                {
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 6: // DOC
                if (field.type == org.apache.thrift.protocol.TType.STRUCT)
                {
                    this.doc = new Doc();
                    this.doc.read(iprot);
                } else
                {
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                }
                break;
            default:
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked
        // in the validate method
        if (!isSetObject_id())
        {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'object_id' was not found in serialized data! Struct: " + toString());
        }
        validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
    {
        validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(OBJECT_ID_FIELD_DESC);
        oprot.writeI32(this.object_id);
        oprot.writeFieldEnd();
        if (this.fields != null)
        {
            oprot.writeFieldBegin(FIELDS_FIELD_DESC);
            {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.fields.size()));
                for (TField _iter12 : this.fields)
                {
                    _iter12.write(oprot);
                }
                oprot.writeListEnd();
            }
            oprot.writeFieldEnd();
        }
        if (isSetTimestamp())
        {
            oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
            oprot.writeI32(this.timestamp);
            oprot.writeFieldEnd();
        }
        if (this.segmentationHost != null)
        {
            if (isSetSegmentationHost())
            {
                oprot.writeFieldBegin(SEGMENTATION_HOST_FIELD_DESC);
                oprot.writeString(this.segmentationHost);
                oprot.writeFieldEnd();
            }
        }
        if (isSetShardIdx())
        {
            oprot.writeFieldBegin(SHARD_IDX_FIELD_DESC);
            oprot.writeI32(this.shardIdx);
            oprot.writeFieldEnd();
        }
        if (this.doc != null)
        {
            if (isSetDoc())
            {
                oprot.writeFieldBegin(DOC_FIELD_DESC);
                this.doc.write(oprot);
                oprot.writeFieldEnd();
            }
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder("TDocument(");
        boolean first = true;

        sb.append("object_id:");
        sb.append(this.object_id);
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("fields:");
        if (this.fields == null)
        {
            sb.append("null");
        } else
        {
            sb.append(this.fields);
        }
        first = false;
        if (isSetTimestamp())
        {
            if (!first)
                sb.append(", ");
            sb.append("timestamp:");
            sb.append(this.timestamp);
            first = false;
        }
        if (isSetSegmentationHost())
        {
            if (!first)
                sb.append(", ");
            sb.append("segmentationHost:");
            if (this.segmentationHost == null)
            {
                sb.append("null");
            } else
            {
                sb.append(this.segmentationHost);
            }
            first = false;
        }
        if (isSetShardIdx())
        {
            if (!first)
                sb.append(", ");
            sb.append("shardIdx:");
            sb.append(this.shardIdx);
            first = false;
        }
        if (isSetDoc())
        {
            if (!first)
                sb.append(", ");
            sb.append("doc:");
            if (this.doc == null)
            {
                sb.append("null");
            } else
            {
                sb.append(this.doc);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException
    {
        // check for required fields
        // alas, we cannot check 'object_id' because it's a primitive and you
        // chose the non-beans generator.
        if (fields == null)
        {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'fields' was not present! Struct: " + toString());
        }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
    {
        try
        {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te)
        {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException
    {
        try
        {
            // it doesn't seem like you should have to do this, but java
            // serialization is wacky, and doesn't call the default constructor.
            __isset_bit_vector = new BitSet(1);
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te)
        {
            throw new java.io.IOException(te);
        }
    }

}
