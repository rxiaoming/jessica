/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.mogujie.jessica.service.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UpdateService
{

    public interface Iface
    {

        public ResultCode update(List<TDocument> documents) throws org.apache.thrift.TException;

    }

    public interface AsyncIface
    {

        public void update(List<TDocument> documents, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.update_call> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface
    {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client>
        {
            public Factory()
            {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot)
            {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot)
            {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot)
        {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot)
        {
            super(iprot, oprot);
        }

        public ResultCode update(List<TDocument> documents) throws org.apache.thrift.TException
        {
            send_update(documents);
            return recv_update();
        }

        public void send_update(List<TDocument> documents) throws org.apache.thrift.TException
        {
            update_args args = new update_args();
            args.setDocuments(documents);
            sendBase("update", args);
        }

        public ResultCode recv_update() throws org.apache.thrift.TException
        {
            update_result result = new update_result();
            receiveBase(result, "update");
            if (result.isSetSuccess())
            {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "update failed: unknown result");
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface
    {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient>
        {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory)
            {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport)
            {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport)
        {
            super(protocolFactory, clientManager, transport);
        }

        public void update(List<TDocument> documents, org.apache.thrift.async.AsyncMethodCallback<update_call> resultHandler) throws org.apache.thrift.TException
        {
            checkReady();
            update_call method_call = new update_call(documents, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class update_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            private List<TDocument> documents;

            public update_call(List<TDocument> documents, org.apache.thrift.async.AsyncMethodCallback<update_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.documents = documents;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("update", org.apache.thrift.protocol.TMessageType.CALL, 0));
                update_args args = new update_args();
                args.setDocuments(documents);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public ResultCode getResult() throws org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_update();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor implements org.apache.thrift.TProcessor
    {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface)
        {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap)
        {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap)
        {
            processMap.put("update", new update());
            return processMap;
        }

        private static class update<I extends Iface> extends org.apache.thrift.ProcessFunction<I, update_args>
        {
            public update()
            {
                super("update");
            }

            protected update_args getEmptyArgsInstance()
            {
                return new update_args();
            }

            protected update_result getResult(I iface, update_args args) throws org.apache.thrift.TException
            {
                update_result result = new update_result();
                result.success = iface.update(args.documents);
                return result;
            }
        }

    }

    public static class update_args implements org.apache.thrift.TBase<update_args, update_args._Fields>, java.io.Serializable, Cloneable
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_args");

        private static final org.apache.thrift.protocol.TField DOCUMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("documents", org.apache.thrift.protocol.TType.LIST, (short) 1);

        public List<TDocument> documents; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            DOCUMENTS((short) 1, "documents");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                case 1: // DOCUMENTS
                    return DOCUMENTS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DOCUMENTS, new org.apache.thrift.meta_data.FieldMetaData("documents", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDocument.class))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_args.class, metaDataMap);
        }

        public update_args()
        {
        }

        public update_args(List<TDocument> documents)
        {
            this();
            this.documents = documents;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public update_args(update_args other)
        {
            if (other.isSetDocuments())
            {
                List<TDocument> __this__documents = new ArrayList<TDocument>();
                for (TDocument other_element : other.documents)
                {
                    __this__documents.add(new TDocument(other_element));
                }
                this.documents = __this__documents;
            }
        }

        public update_args deepCopy()
        {
            return new update_args(this);
        }

        @Override
        public void clear()
        {
            this.documents = null;
        }

        public int getDocumentsSize()
        {
            return (this.documents == null) ? 0 : this.documents.size();
        }

        public java.util.Iterator<TDocument> getDocumentsIterator()
        {
            return (this.documents == null) ? null : this.documents.iterator();
        }

        public void addToDocuments(TDocument elem)
        {
            if (this.documents == null)
            {
                this.documents = new ArrayList<TDocument>();
            }
            this.documents.add(elem);
        }

        public List<TDocument> getDocuments()
        {
            return this.documents;
        }

        public update_args setDocuments(List<TDocument> documents)
        {
            this.documents = documents;
            return this;
        }

        public void unsetDocuments()
        {
            this.documents = null;
        }

        /**
         * Returns true if field documents is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetDocuments()
        {
            return this.documents != null;
        }

        public void setDocumentsIsSet(boolean value)
        {
            if (!value)
            {
                this.documents = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
            case DOCUMENTS:
                if (value == null)
                {
                    unsetDocuments();
                } else
                {
                    setDocuments((List<TDocument>) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
            case DOCUMENTS:
                return getDocuments();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
            case DOCUMENTS:
                return isSetDocuments();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof update_args)
                return this.equals((update_args) that);
            return false;
        }

        public boolean equals(update_args that)
        {
            if (that == null)
                return false;

            boolean this_present_documents = true && this.isSetDocuments();
            boolean that_present_documents = true && that.isSetDocuments();
            if (this_present_documents || that_present_documents)
            {
                if (!(this_present_documents && that_present_documents))
                    return false;
                if (!this.documents.equals(that.documents))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            return 0;
        }

        public int compareTo(update_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            update_args typedOther = (update_args) other;

            lastComparison = Boolean.valueOf(isSetDocuments()).compareTo(typedOther.isSetDocuments());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetDocuments())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documents, typedOther.documents);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException
        {
            org.apache.thrift.protocol.TField field;
            iprot.readStructBegin();
            while (true)
            {
                field = iprot.readFieldBegin();
                if (field.type == org.apache.thrift.protocol.TType.STOP)
                {
                    break;
                }
                switch (field.id)
                {
                case 1: // DOCUMENTS
                    if (field.type == org.apache.thrift.protocol.TType.LIST)
                    {
                        {
                            org.apache.thrift.protocol.TList _list31 = iprot.readListBegin();
                            this.documents = new ArrayList<TDocument>(_list31.size);
                            for (int _i32 = 0; _i32 < _list31.size; ++_i32)
                            {
                                TDocument _elem33; // required
                                _elem33 = new TDocument();
                                _elem33.read(iprot);
                                this.documents.add(_elem33);
                            }
                            iprot.readListEnd();
                        }
                    } else
                    {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
        {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (this.documents != null)
            {
                oprot.writeFieldBegin(DOCUMENTS_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.documents.size()));
                    for (TDocument _iter34 : this.documents)
                    {
                        _iter34.write(oprot);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("update_args(");
            boolean first = true;

            sb.append("documents:");
            if (this.documents == null)
            {
                sb.append("null");
            } else
            {
                sb.append(this.documents);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

    }

    public static class update_result implements org.apache.thrift.TBase<update_result, update_result._Fields>, java.io.Serializable, Cloneable
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        public ResultCode success; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                case 0: // SUCCESS
                    return SUCCESS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultCode.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_result.class, metaDataMap);
        }

        public update_result()
        {
        }

        public update_result(ResultCode success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public update_result(update_result other)
        {
            if (other.isSetSuccess())
            {
                this.success = new ResultCode(other.success);
            }
        }

        public update_result deepCopy()
        {
            return new update_result(this);
        }

        @Override
        public void clear()
        {
            this.success = null;
        }

        public ResultCode getSuccess()
        {
            return this.success;
        }

        public update_result setSuccess(ResultCode success)
        {
            this.success = success;
            return this;
        }

        public void unsetSuccess()
        {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSetSuccess()
        {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value)
        {
            if (!value)
            {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
            case SUCCESS:
                if (value == null)
                {
                    unsetSuccess();
                } else
                {
                    setSuccess((ResultCode) value);
                }
                break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
            case SUCCESS:
                return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
            case SUCCESS:
                return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof update_result)
                return this.equals((update_result) that);
            return false;
        }

        public boolean equals(update_result that)
        {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success)
            {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            return 0;
        }

        public int compareTo(update_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            update_result typedOther = (update_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetSuccess())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException
        {
            org.apache.thrift.protocol.TField field;
            iprot.readStructBegin();
            while (true)
            {
                field = iprot.readFieldBegin();
                if (field.type == org.apache.thrift.protocol.TType.STOP)
                {
                    break;
                }
                switch (field.id)
                {
                case 0: // SUCCESS
                    if (field.type == org.apache.thrift.protocol.TType.STRUCT)
                    {
                        this.success = new ResultCode();
                        this.success.read(iprot);
                    } else
                    {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be
            // checked in the validate method
            validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
        {
            oprot.writeStructBegin(STRUCT_DESC);

            if (this.isSetSuccess())
            {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                this.success.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("update_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null)
            {
                sb.append("null");
            } else
            {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

    }

}
