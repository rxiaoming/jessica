/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.mogujie.jessica.service.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SearchResponse implements org.apache.thrift.TBase<SearchResponse, SearchResponse._Fields>, java.io.Serializable, Cloneable
{
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SearchResponse");

    private static final org.apache.thrift.protocol.TField DOCS_FIELD_DESC = new org.apache.thrift.protocol.TField("docs", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField HITS_FIELD_DESC = new org.apache.thrift.protocol.TField("hits", org.apache.thrift.protocol.TType.I32, (short) 2);
    private static final org.apache.thrift.protocol.TField RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("results", org.apache.thrift.protocol.TType.LIST, (short) 3);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short) 4);

    public int docs; // required
    public int hits; // required
    public List<ResultHit> results; // required
    public long time; // required

    /**
     * The set of fields this struct contains, along with convenience methods
     * for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum
    {
        DOCS((short) 1, "docs"), HITS((short) 2, "hits"), RESULTS((short) 3, "results"), TIME((short) 4, "time");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static
        {
            for (_Fields field : EnumSet.allOf(_Fields.class))
            {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not
         * found.
         */
        public static _Fields findByThriftId(int fieldId)
        {
            switch (fieldId)
            {
            case 1: // DOCS
                return DOCS;
            case 2: // HITS
                return HITS;
            case 3: // RESULTS
                return RESULTS;
            case 4: // TIME
                return TIME;
            default:
                return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId)
        {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not
         * found.
         */
        public static _Fields findByName(String name)
        {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName)
        {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId()
        {
            return _thriftId;
        }

        public String getFieldName()
        {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __DOCS_ISSET_ID = 0;
    private static final int __HITS_ISSET_ID = 1;
    private static final int __TIME_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static
    {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.DOCS, new org.apache.thrift.meta_data.FieldMetaData("docs", org.apache.thrift.TFieldRequirementType.REQUIRED, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.HITS, new org.apache.thrift.meta_data.FieldMetaData("hits", org.apache.thrift.TFieldRequirementType.REQUIRED, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.RESULTS, new org.apache.thrift.meta_data.FieldMetaData("results", org.apache.thrift.TFieldRequirementType.REQUIRED, new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultHit.class))));
        tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.REQUIRED, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SearchResponse.class, metaDataMap);
    }

    public SearchResponse()
    {
    }

    public SearchResponse(int docs, int hits, List<ResultHit> results, long time)
    {
        this();
        this.docs = docs;
        setDocsIsSet(true);
        this.hits = hits;
        setHitsIsSet(true);
        this.results = results;
        this.time = time;
        setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SearchResponse(SearchResponse other)
    {
        __isset_bit_vector.clear();
        __isset_bit_vector.or(other.__isset_bit_vector);
        this.docs = other.docs;
        this.hits = other.hits;
        if (other.isSetResults())
        {
            List<ResultHit> __this__results = new ArrayList<ResultHit>();
            for (ResultHit other_element : other.results)
            {
                __this__results.add(new ResultHit(other_element));
            }
            this.results = __this__results;
        }
        this.time = other.time;
    }

    public SearchResponse deepCopy()
    {
        return new SearchResponse(this);
    }

    @Override
    public void clear()
    {
        setDocsIsSet(false);
        this.docs = 0;
        setHitsIsSet(false);
        this.hits = 0;
        this.results = null;
        setTimeIsSet(false);
        this.time = 0;
    }

    public int getDocs()
    {
        return this.docs;
    }

    public SearchResponse setDocs(int docs)
    {
        this.docs = docs;
        setDocsIsSet(true);
        return this;
    }

    public void unsetDocs()
    {
        __isset_bit_vector.clear(__DOCS_ISSET_ID);
    }

    /**
     * Returns true if field docs is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSetDocs()
    {
        return __isset_bit_vector.get(__DOCS_ISSET_ID);
    }

    public void setDocsIsSet(boolean value)
    {
        __isset_bit_vector.set(__DOCS_ISSET_ID, value);
    }

    public int getHits()
    {
        return this.hits;
    }

    public SearchResponse setHits(int hits)
    {
        this.hits = hits;
        setHitsIsSet(true);
        return this;
    }

    public void unsetHits()
    {
        __isset_bit_vector.clear(__HITS_ISSET_ID);
    }

    /**
     * Returns true if field hits is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSetHits()
    {
        return __isset_bit_vector.get(__HITS_ISSET_ID);
    }

    public void setHitsIsSet(boolean value)
    {
        __isset_bit_vector.set(__HITS_ISSET_ID, value);
    }

    public int getResultsSize()
    {
        return (this.results == null) ? 0 : this.results.size();
    }

    public java.util.Iterator<ResultHit> getResultsIterator()
    {
        return (this.results == null) ? null : this.results.iterator();
    }

    public void addToResults(ResultHit elem)
    {
        if (this.results == null)
        {
            this.results = new ArrayList<ResultHit>();
        }
        this.results.add(elem);
    }

    public List<ResultHit> getResults()
    {
        return this.results;
    }

    public SearchResponse setResults(List<ResultHit> results)
    {
        this.results = results;
        return this;
    }

    public void unsetResults()
    {
        this.results = null;
    }

    /**
     * Returns true if field results is set (has been assigned a value) and
     * false otherwise
     */
    public boolean isSetResults()
    {
        return this.results != null;
    }

    public void setResultsIsSet(boolean value)
    {
        if (!value)
        {
            this.results = null;
        }
    }

    public long getTime()
    {
        return this.time;
    }

    public SearchResponse setTime(long time)
    {
        this.time = time;
        setTimeIsSet(true);
        return this;
    }

    public void unsetTime()
    {
        __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /**
     * Returns true if field time is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSetTime()
    {
        return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value)
    {
        __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value)
    {
        switch (field)
        {
        case DOCS:
            if (value == null)
            {
                unsetDocs();
            } else
            {
                setDocs((Integer) value);
            }
            break;

        case HITS:
            if (value == null)
            {
                unsetHits();
            } else
            {
                setHits((Integer) value);
            }
            break;

        case RESULTS:
            if (value == null)
            {
                unsetResults();
            } else
            {
                setResults((List<ResultHit>) value);
            }
            break;

        case TIME:
            if (value == null)
            {
                unsetTime();
            } else
            {
                setTime((Long) value);
            }
            break;

        }
    }

    public Object getFieldValue(_Fields field)
    {
        switch (field)
        {
        case DOCS:
            return Integer.valueOf(getDocs());

        case HITS:
            return Integer.valueOf(getHits());

        case RESULTS:
            return getResults();

        case TIME:
            return Long.valueOf(getTime());

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned
     * a value) and false otherwise
     */
    public boolean isSet(_Fields field)
    {
        if (field == null)
        {
            throw new IllegalArgumentException();
        }

        switch (field)
        {
        case DOCS:
            return isSetDocs();
        case HITS:
            return isSetHits();
        case RESULTS:
            return isSetResults();
        case TIME:
            return isSetTime();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that)
    {
        if (that == null)
            return false;
        if (that instanceof SearchResponse)
            return this.equals((SearchResponse) that);
        return false;
    }

    public boolean equals(SearchResponse that)
    {
        if (that == null)
            return false;

        boolean this_present_docs = true;
        boolean that_present_docs = true;
        if (this_present_docs || that_present_docs)
        {
            if (!(this_present_docs && that_present_docs))
                return false;
            if (this.docs != that.docs)
                return false;
        }

        boolean this_present_hits = true;
        boolean that_present_hits = true;
        if (this_present_hits || that_present_hits)
        {
            if (!(this_present_hits && that_present_hits))
                return false;
            if (this.hits != that.hits)
                return false;
        }

        boolean this_present_results = true && this.isSetResults();
        boolean that_present_results = true && that.isSetResults();
        if (this_present_results || that_present_results)
        {
            if (!(this_present_results && that_present_results))
                return false;
            if (!this.results.equals(that.results))
                return false;
        }

        boolean this_present_time = true;
        boolean that_present_time = true;
        if (this_present_time || that_present_time)
        {
            if (!(this_present_time && that_present_time))
                return false;
            if (this.time != that.time)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode()
    {
        return 0;
    }

    public int compareTo(SearchResponse other)
    {
        if (!getClass().equals(other.getClass()))
        {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        SearchResponse typedOther = (SearchResponse) other;

        lastComparison = Boolean.valueOf(isSetDocs()).compareTo(typedOther.isSetDocs());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetDocs())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docs, typedOther.docs);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetHits()).compareTo(typedOther.isSetHits());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetHits())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hits, typedOther.hits);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetResults()).compareTo(typedOther.isSetResults());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetResults())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.results, typedOther.results);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetTime())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId)
    {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException
    {
        org.apache.thrift.protocol.TField field;
        iprot.readStructBegin();
        while (true)
        {
            field = iprot.readFieldBegin();
            if (field.type == org.apache.thrift.protocol.TType.STOP)
            {
                break;
            }
            switch (field.id)
            {
            case 1: // DOCS
                if (field.type == org.apache.thrift.protocol.TType.I32)
                {
                    this.docs = iprot.readI32();
                    setDocsIsSet(true);
                } else
                {
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 2: // HITS
                if (field.type == org.apache.thrift.protocol.TType.I32)
                {
                    this.hits = iprot.readI32();
                    setHitsIsSet(true);
                } else
                {
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 3: // RESULTS
                if (field.type == org.apache.thrift.protocol.TType.LIST)
                {
                    {
                        org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                        this.results = new ArrayList<ResultHit>(_list27.size);
                        for (int _i28 = 0; _i28 < _list27.size; ++_i28)
                        {
                            ResultHit _elem29; // required
                            _elem29 = new ResultHit();
                            _elem29.read(iprot);
                            this.results.add(_elem29);
                        }
                        iprot.readListEnd();
                    }
                } else
                {
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 4: // TIME
                if (field.type == org.apache.thrift.protocol.TType.I64)
                {
                    this.time = iprot.readI64();
                    setTimeIsSet(true);
                } else
                {
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                }
                break;
            default:
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked
        // in the validate method
        if (!isSetDocs())
        {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'docs' was not found in serialized data! Struct: " + toString());
        }
        if (!isSetHits())
        {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'hits' was not found in serialized data! Struct: " + toString());
        }
        if (!isSetTime())
        {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'time' was not found in serialized data! Struct: " + toString());
        }
        validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
    {
        validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DOCS_FIELD_DESC);
        oprot.writeI32(this.docs);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HITS_FIELD_DESC);
        oprot.writeI32(this.hits);
        oprot.writeFieldEnd();
        if (this.results != null)
        {
            oprot.writeFieldBegin(RESULTS_FIELD_DESC);
            {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.results.size()));
                for (ResultHit _iter30 : this.results)
                {
                    _iter30.write(oprot);
                }
                oprot.writeListEnd();
            }
            oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI64(this.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder("SearchResponse(");
        boolean first = true;

        sb.append("docs:");
        sb.append(this.docs);
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("hits:");
        sb.append(this.hits);
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("results:");
        if (this.results == null)
        {
            sb.append("null");
        } else
        {
            sb.append(this.results);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("time:");
        sb.append(this.time);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException
    {
        // check for required fields
        // alas, we cannot check 'docs' because it's a primitive and you chose
        // the non-beans generator.
        // alas, we cannot check 'hits' because it's a primitive and you chose
        // the non-beans generator.
        if (results == null)
        {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'results' was not present! Struct: " + toString());
        }
        // alas, we cannot check 'time' because it's a primitive and you chose
        // the non-beans generator.
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
    {
        try
        {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te)
        {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException
    {
        try
        {
            // it doesn't seem like you should have to do this, but java
            // serialization is wacky, and doesn't call the default constructor.
            __isset_bit_vector = new BitSet(1);
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te)
        {
            throw new java.io.IOException(te);
        }
    }

}
